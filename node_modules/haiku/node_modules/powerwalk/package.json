{
  "name": "powerwalk",
  "version": "0.0.1",
  "description": "Recursively walks a directory and emits filenames. Also supports additional stats and content events (if you want them).",
  "main": "index.js",
  "scripts": {
    "test": "mocha test/test*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jxson/powerwalk.git"
  },
  "keywords": [
    "walk",
    "tree",
    "file",
    "files",
    "fs",
    "util"
  ],
  "author": {
    "name": "Jason Campbell",
    "email": "jason@js.la",
    "url": "http://artifact.sh"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "2bce49cc8d60801864b60e94eb58a130caa263af",
  "dependencies": {
    "graceful-fs": "1.2.0",
    "glob": "3.1.21"
  },
  "devDependencies": {
    "mocha": "~1.8.2"
  },
  "readme": "# powerwalk [![Build Status](https://travis-ci.org/jxson/powerwalk.png?branch=master)](https://travis-ci.org/jxson/powerwalk)\n\nRecursively walks a directory and emits filenames. Also supports additional stats and content events (if you want them).\n\nI keep writing and re-writing this code in one form or another for most of my node projects. I thought it might be useful to some of you. There are a few similar packages on npm already but none seem to have either the narrow focus I wanted or they use straight `fs` calls which can be harsh when EMFILE happens.\n\n    powerwalk('./content')\n    .on('error', function(err){\n      throw err\n    })\n    .on('read', function(f){\n      console.log(f)\n    })\n    .on('end', finish)\n\n# powerwalk(dir)\n\nPerforms an async walk, returns an event emitter that will execute file calls and emit events appropriately.\n\n# Events\n\n* `end` when the walk is over this is emitted\n* `file` every time a file is found this is emitted with the absolute filename of the file\n* `stat` if there is a listener for this event an `fs.stat` call will be made and emit this event with a `powerwalk.File` object\n* `read`\n* `error` emitted when an fs error happens\n\n# Class powerwalk.File\n\nObjects emitted from `stat` and and `read` events will be of this type. `powerwalk.File` objects will have 3 properties:\n\n* `filename` - the absolute pathname for the file\n* `stats` - the stats result for the file\n* `data` - the contents of the file\n",
  "_id": "powerwalk@0.0.1",
  "dist": {
    "shasum": "10111c04849523faa91e605dfed297aac3ce44a8"
  },
  "_from": "powerwalk@0.0.1",
  "_resolved": "https://registry.npmjs.org/powerwalk/-/powerwalk-0.0.1.tgz"
}
